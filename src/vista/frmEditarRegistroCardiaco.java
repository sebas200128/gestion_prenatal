/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.RegistroCardiaco;

/**
 *
 * @author user
 */
public class frmEditarRegistroCardiaco extends javax.swing.JFrame {

    private DefaultTableModel modeloTabla;
    private RegistroCardiaco registroActual;

    /**
     * Creates new form frmEditarRegistroCardiaco
     */
    public frmEditarRegistroCardiaco() {
        initComponents();
        inicializarComponentes();
        setLocationRelativeTo(null);
    }

    private void inicializarComponentes() {
        inicializarTabla();
        inicializarComboBox();
        cargarDatosIniciales();
    }

    private void inicializarTabla() {
        String[] columnas = {"ID", "Paciente ID", "Fecha", "Hora", "Presión Arterial",
            "Freq. Cardíaca", "Freq. Respiratoria", "Temperatura",
            "Saturación O2", "Peso", "Altura", "Observaciones"};
        modeloTabla = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que la tabla no sea editable directamente
            }
        };
        tblDatos.setModel(modeloTabla);

        // Ajustar ancho de columnas
        tblDatos.getColumnModel().getColumn(0).setPreferredWidth(50);  // ID
        tblDatos.getColumnModel().getColumn(1).setPreferredWidth(80);  // Paciente ID
        tblDatos.getColumnModel().getColumn(2).setPreferredWidth(80);  // Fecha
        tblDatos.getColumnModel().getColumn(3).setPreferredWidth(60);  // Hora
        tblDatos.getColumnModel().getColumn(4).setPreferredWidth(90);  // Presión
        tblDatos.getColumnModel().getColumn(5).setPreferredWidth(80);  // Freq Card
        tblDatos.getColumnModel().getColumn(6).setPreferredWidth(80);  // Freq Resp
        tblDatos.getColumnModel().getColumn(7).setPreferredWidth(80);  // Temperatura
        tblDatos.getColumnModel().getColumn(8).setPreferredWidth(80);  // Saturación
        tblDatos.getColumnModel().getColumn(9).setPreferredWidth(60);  // Peso
        tblDatos.getColumnModel().getColumn(10).setPreferredWidth(60); // Altura
        tblDatos.getColumnModel().getColumn(11).setPreferredWidth(150); // Observaciones
    }

    private void inicializarComboBox() {
        String[] opciones = {
            "presion_arterial",
            "frecuencia_cardiaca",
            "frecuencia_respiratoria",
            "temperatura",
            "saturacion_oxigeno",
            "peso",
            "altura",
            "observaciones",
            "fecha",
            "hora"
        };
        cbxDato.setModel(new DefaultComboBoxModel<>(opciones));
    }

    private void cargarDatosIniciales() {
        btnVerDetallesActionPerformed(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        cbxDato = new javax.swing.JComboBox<>();
        txtEditarDato = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnVerDetalles = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDatos = new javax.swing.JTable();
        btnNuevoRegistro = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();
        btnBuscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("ID");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, -1));
        getContentPane().add(txtId, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 90, 40));

        cbxDato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbxDato.setBorder(javax.swing.BorderFactory.createTitledBorder("Seleccione"));
        getContentPane().add(cbxDato, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 20, 150, 50));
        getContentPane().add(txtEditarDato, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 460, 30));

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 150, 110, 40));

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEditar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 70, 40));

        btnVerDetalles.setText("Ver Detalels");
        btnVerDetalles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerDetallesActionPerformed(evt);
            }
        });
        getContentPane().add(btnVerDetalles, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 150, 110, 40));

        tblDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblDatos);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, 590, 240));

        btnNuevoRegistro.setText("Nuevo Registro");
        btnNuevoRegistro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoRegistroActionPerformed(evt);
            }
        });
        getContentPane().add(btnNuevoRegistro, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, -1, 40));

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });
        getContentPane().add(btnVolver, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 480, -1, 40));

        btnBuscar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/lupa.png"))); // NOI18N
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });
        getContentPane().add(btnBuscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, 50, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        // TODO add your handling code here:
        try {
            String idTexto = txtId.getText().trim();
            if (idTexto.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID.");
                return;
            }

            int id = Integer.parseInt(idTexto);
            registroActual = RegistroCardiaco.buscarPorId(id);

            if (registroActual != null) {
                JOptionPane.showMessageDialog(this,
                        "Registro encontrado para el paciente ID: " + registroActual.getPacienteId()
                        + "\nFecha: " + registroActual.getFecha()
                        + "\nHora: " + registroActual.getHora());

                // Mostrar el valor actual del campo seleccionado
                mostrarValorActual();

                // Habilitar controles de edición
                cbxDato.setEnabled(true);
                txtEditarDato.setEnabled(true);
                btnEditar.setEnabled(true);
                btnEliminar.setEnabled(true);

            } else {
                JOptionPane.showMessageDialog(this, "Registro no encontrado con ID: " + id);
                limpiarFormulario();
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un ID numérico válido.");
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        // TODO add your handling code here:
        if (registroActual == null) {
            JOptionPane.showMessageDialog(this, "Busque un registro primero.");
            return;
        }

        String campo = (String) cbxDato.getSelectedItem();
        String nuevoValor = txtEditarDato.getText().trim();

        if (nuevoValor.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese el nuevo valor.");
            return;
        }

        // Validar el tipo de dato según el campo
        if (!validarTipoDato(campo, nuevoValor)) {
            return;
        }

        boolean exito = registroActual.editar(campo, nuevoValor);

        if (exito) {
            JOptionPane.showMessageDialog(this, "Registro actualizado correctamente.");
            // Refrescar el registro actual
            registroActual = RegistroCardiaco.buscarPorId(registroActual.getId());
            // Actualizar la tabla
            btnVerDetallesActionPerformed(evt);
            // Limpiar el campo de edición
            txtEditarDato.setText("");
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo actualizar el registro. Verifique los datos.");
        }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnVerDetallesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerDetallesActionPerformed
        // TODO add your handling code here:
        modeloTabla.setRowCount(0);
        List<RegistroCardiaco> registros = RegistroCardiaco.obtenerTodos();

        for (RegistroCardiaco rc : registros) {
            modeloTabla.addRow(new Object[]{
                rc.getId(),
                rc.getPacienteId(),
                rc.getFecha(),
                rc.getHora(),
                rc.getPresionArterial(),
                rc.getFrecuenciaCardiaca(),
                rc.getFrecuenciaRespiratoria(),
                rc.getTemperatura(),
                rc.getSaturacionOxigeno(),
                rc.getPeso(),
                rc.getAltura(),
                rc.getObservaciones()
            });
        }

        if (registros.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se encontraron registros en la base de datos.");
        }
    }//GEN-LAST:event_btnVerDetallesActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // TODO add your handling code here:
        if (registroActual == null) {
            JOptionPane.showMessageDialog(this, "Busque un registro primero.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this,
                "¿Está seguro de eliminar el registro del paciente ID: " + registroActual.getPacienteId()
                + "?\nFecha: " + registroActual.getFecha() + " " + registroActual.getHora(),
                "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean eliminado = registroActual.eliminar();
            if (eliminado) {
                JOptionPane.showMessageDialog(this, "Registro eliminado correctamente.");
                btnVerDetallesActionPerformed(evt);
                limpiarFormulario();
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo eliminar el registro.");
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnNuevoRegistroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoRegistroActionPerformed
        // TODO add your handling code here:
        frmDetallePacientes regisCardiaco = new frmDetallePacientes();
        regisCardiaco.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnNuevoRegistroActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
        // TODO add your handling code here:
        frmDetallePacientes detallesp = new frmDetallePacientes();
        detallesp.setLocationRelativeTo(null);
        detallesp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed

    // Métodos auxiliares
    private void mostrarValorActual() {
        if (registroActual == null) {
            return;
        }

        String campo = (String) cbxDato.getSelectedItem();
        String valorActual = obtenerValorCampo(campo);
        txtEditarDato.setText(valorActual);
    }

    private String obtenerValorCampo(String campo) {
        if (registroActual == null) {
            return "";
        }

        switch (campo) {
            case "presion_arterial":
                return registroActual.getPresionArterial() != null ? registroActual.getPresionArterial() : "";
            case "frecuencia_cardiaca":
                return String.valueOf(registroActual.getFrecuenciaCardiaca());
            case "frecuencia_respiratoria":
                return String.valueOf(registroActual.getFrecuenciaRespiratoria());
            case "temperatura":
                return String.valueOf(registroActual.getTemperatura());
            case "saturacion_oxigeno":
                return String.valueOf(registroActual.getSaturacionOxigeno());
            case "peso":
                return String.valueOf(registroActual.getPeso());
            case "altura":
                return String.valueOf(registroActual.getAltura());
            case "observaciones":
                return registroActual.getObservaciones() != null ? registroActual.getObservaciones() : "";
            case "fecha":
                return registroActual.getFecha() != null ? registroActual.getFecha() : "";
            case "hora":
                return registroActual.getHora() != null ? registroActual.getHora() : "";
            default:
                return "";
        }
    }

    private boolean validarTipoDato(String campo, String valor) {
        try {
            switch (campo) {
                case "frecuencia_cardiaca":
                case "frecuencia_respiratoria":
                case "saturacion_oxigeno":
                    int intVal = Integer.parseInt(valor);
                    if (intVal < 0) {
                        JOptionPane.showMessageDialog(this, "El valor no puede ser negativo.");
                        return false;
                    }
                    break;
                case "temperatura":
                case "peso":
                case "altura":
                    double doubleVal = Double.parseDouble(valor);
                    if (doubleVal < 0) {
                        JOptionPane.showMessageDialog(this, "El valor no puede ser negativo.");
                        return false;
                    }
                    break;
                case "presion_arterial":
                    // Validar formato de presión (ej: 120/80)
                    if (!valor.matches("\\d+/\\d+")) {
                        JOptionPane.showMessageDialog(this, "La presión arterial debe tener formato XXX/XX (ej: 120/80).");
                        return false;
                    }
                    break;
                case "fecha":
                    // Validar formato de fecha (puedes ajustar según tu formato)
                    if (!valor.matches("\\d{4}-\\d{2}-\\d{2}") && !valor.matches("\\d{2}/\\d{2}/\\d{4}")) {
                        JOptionPane.showMessageDialog(this, "La fecha debe tener formato YYYY-MM-DD o DD/MM/YYYY.");
                        return false;
                    }
                    break;
            }
            return true;
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El valor ingresado no es válido para el campo " + campo + ".");
            return false;
        }
    }

    private void limpiarFormulario() {
        registroActual = null;
        txtId.setText("");
        txtEditarDato.setText("");
        cbxDato.setEnabled(false);
        txtEditarDato.setEnabled(false);
        btnEditar.setEnabled(false);
        btnEliminar.setEnabled(false);
    }

    // Event listener para el ComboBox
    private void cbxDatoItemStateChanged(java.awt.event.ItemEvent evt) {
        if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
            mostrarValorActual();
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnNuevoRegistro;
    private javax.swing.JButton btnVerDetalles;
    private javax.swing.JButton btnVolver;
    private javax.swing.JComboBox<String> cbxDato;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblDatos;
    private javax.swing.JTextField txtEditarDato;
    private javax.swing.JTextField txtId;
    // End of variables declaration//GEN-END:variables
}
